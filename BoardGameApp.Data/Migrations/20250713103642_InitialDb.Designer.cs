// <auto-generated />
using System;
using BoardGameApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BoardGameApp.Data.Migrations
{
    [DbContext(typeof(BoardGameAppDbContext))]
    [Migration("20250713103642_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BoardGameApp.Data.Models.BoardGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Game Unique Identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Game description");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasComment("Game duration");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Url of the image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if game is deleted");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int")
                        .HasComment("Max number of the players");

                    b.Property<int>("MinPlayers")
                        .HasColumnType("int")
                        .HasComment("Min players needed");

                    b.Property<string>("RulesUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Url of the game rules");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Game title");

                    b.HasKey("Id");

                    b.ToTable("BoardGames");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.BoardGameCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the game category");

                    b.Property<Guid>("BoardGameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the game in this category");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the game is actively offered in this category");

                    b.HasKey("CategoryId", "BoardGameId");

                    b.HasIndex("BoardGameId");

                    b.ToTable("BoardGameCategories");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.BoardgameUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.BoardgameUserFavorite", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the user");

                    b.Property<Guid>("BoardGameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the game");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the game is actively in user favorite list");

                    b.HasKey("UserId", "BoardGameId");

                    b.HasIndex("BoardGameId");

                    b.ToTable("BoardgameUserFavorites");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Category Unique Identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if category is deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Category name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("City Unique Identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if city is deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("City name");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.Club", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Club Unique Identifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Location");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of city");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if club is deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Club name");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.ClubBoardGame", b =>
                {
                    b.Property<Guid>("ClubId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the game club");

                    b.Property<Guid>("BoardGameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the game played in this club");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the game is actively offered in this club");

                    b.HasKey("ClubId", "BoardGameId");

                    b.HasIndex("BoardGameId");

                    b.ToTable("ClubBoardGames");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.GameRanking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Game ranking Unique Identifier");

                    b.Property<Guid>("BoardGameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the game");

                    b.Property<int>("Draws")
                        .HasColumnType("int")
                        .HasComment("Player draws");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Losses")
                        .HasColumnType("int")
                        .HasComment("Player losses");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the user");

                    b.Property<int>("Wins")
                        .HasColumnType("int")
                        .HasComment("Player wins");

                    b.HasKey("Id");

                    b.HasIndex("BoardGameId");

                    b.HasIndex("UserId");

                    b.ToTable("GameRankings");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.GameSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Game session Unique Identifier");

                    b.Property<Guid>("BoardGameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the game");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the club");

                    b.Property<int>("CurrentPlayers")
                        .HasColumnType("int")
                        .HasComment("Number of currently registered players");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasComment("Game session end");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the game session is deleted");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int")
                        .HasComment("Maximum number of players for the session");

                    b.Property<Guid>("OrganizerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the user who organized the session");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasComment("Game session start");

                    b.HasKey("Id");

                    b.HasIndex("BoardGameId");

                    b.HasIndex("ClubId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("GameSessions");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Reservation Unique Identifier");

                    b.Property<Guid>("GameSessionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the game session");

                    b.Property<DateTime>("ReservationTime")
                        .HasColumnType("datetime2")
                        .HasComment("Time when the reservation was made");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the user");

                    b.HasKey("Id");

                    b.HasIndex("GameSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the ticket");

                    b.Property<DateTime>("IssuedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the ticket was issued");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 6)")
                        .HasComment("Ticket price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Tickets quantity bought");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the user");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the user");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.BoardGameCategory", b =>
                {
                    b.HasOne("BoardGameApp.Data.Models.BoardGame", "BoardGame")
                        .WithMany("BoardGameCategories")
                        .HasForeignKey("BoardGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameApp.Data.Models.Category", "Category")
                        .WithMany("BoardGameCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoardGame");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.BoardgameUserFavorite", b =>
                {
                    b.HasOne("BoardGameApp.Data.Models.BoardGame", "BoardGame")
                        .WithMany("FavoritedByUsers")
                        .HasForeignKey("BoardGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameApp.Data.Models.BoardgameUser", "User")
                        .WithMany("FavoriteBoardGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoardGame");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.Club", b =>
                {
                    b.HasOne("BoardGameApp.Data.Models.City", "City")
                        .WithMany("Clubs")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.ClubBoardGame", b =>
                {
                    b.HasOne("BoardGameApp.Data.Models.BoardGame", "BoardGame")
                        .WithMany("ClubBoardGames")
                        .HasForeignKey("BoardGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameApp.Data.Models.Club", "Club")
                        .WithMany("ClubBoardGames")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoardGame");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.GameRanking", b =>
                {
                    b.HasOne("BoardGameApp.Data.Models.BoardGame", "BoardGame")
                        .WithMany("Rankings")
                        .HasForeignKey("BoardGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameApp.Data.Models.BoardgameUser", "User")
                        .WithMany("GameRankings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoardGame");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.GameSession", b =>
                {
                    b.HasOne("BoardGameApp.Data.Models.BoardGame", "BoardGame")
                        .WithMany("GameSessions")
                        .HasForeignKey("BoardGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameApp.Data.Models.Club", "Club")
                        .WithMany("GameSessions")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameApp.Data.Models.BoardgameUser", "Organizer")
                        .WithMany()
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoardGame");

                    b.Navigation("Club");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.Reservation", b =>
                {
                    b.HasOne("BoardGameApp.Data.Models.GameSession", "GameSession")
                        .WithMany("Reservations")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameApp.Data.Models.BoardgameUser", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameSession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.Ticket", b =>
                {
                    b.HasOne("BoardGameApp.Data.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameApp.Data.Models.BoardgameUser", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BoardGameApp.Data.Models.BoardgameUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BoardGameApp.Data.Models.BoardgameUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameApp.Data.Models.BoardgameUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BoardGameApp.Data.Models.BoardgameUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.BoardGame", b =>
                {
                    b.Navigation("BoardGameCategories");

                    b.Navigation("ClubBoardGames");

                    b.Navigation("FavoritedByUsers");

                    b.Navigation("GameSessions");

                    b.Navigation("Rankings");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.BoardgameUser", b =>
                {
                    b.Navigation("FavoriteBoardGames");

                    b.Navigation("GameRankings");

                    b.Navigation("Reservations");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.Category", b =>
                {
                    b.Navigation("BoardGameCategories");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.City", b =>
                {
                    b.Navigation("Clubs");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.Club", b =>
                {
                    b.Navigation("ClubBoardGames");

                    b.Navigation("GameSessions");
                });

            modelBuilder.Entity("BoardGameApp.Data.Models.GameSession", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
